name: Test Cocoapods Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
    - master
    - develop
    - improve-ci

env:
  PROJECT_NAME: TempProject

jobs:
  pods-lint:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v2
    - uses: n1hility/cancel-previous-runs@v2
      with:
        token: ${{ secrets.MANUAL_ACTION_TOKEN }}

    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Lint Cocoapods
      run: |
        gem install cocoapods
        pod lib lint Adyen.podspec --allow-warnings --verbose


  pods-archive:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v2
    - uses: n1hility/cancel-previous-runs@v2
      with:
        token: ${{ secrets.MANUAL_ACTION_TOKEN }}

    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install Cocoapods
      run: |
        gem install cocoapods

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        DEV_CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode --output $DEV_CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import release certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $DEV_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Setup test fixture
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        Scripts/generate_swift_project.sh pods -w -t "$DEVELOPMENT_TEAM" -p $PROJECT_NAME

    - name: Build and Archive for generic iOS device
      working-directory: ${{ env.PROJECT_NAME }}
      run: |
        xcodebuild clean build archive -scheme $PROJECT_NAME-Package -workspace $PROJECT_NAME.xcworkspace -destination 'generic/platform=iOS' | xcpretty --utf --color

    - name: Build and Archive for x86_64 simulator
      working-directory: ${{ env.PROJECT_NAME }}
      run: |
        xcodebuild clean build archive -scheme $PROJECT_NAME-Package -workspace $PROJECT_NAME.xcworkspace -destination 'generic/platform=iOS Simulator' | xcpretty --utf --color


  pods-test:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v2
    - uses: n1hility/cancel-previous-runs@v2
      with:
        token: ${{ secrets.MANUAL_ACTION_TOKEN }}

    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        gem install cocoapods
        brew install xcodegen

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        DEV_CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode --output $DEV_CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import release certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $DEV_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Setup test fixture
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        Scripts/generate_xcodegen_project.sh pods -w -t "$DEVELOPMENT_TEAM" -p $PROJECT_NAME

    - name: Build and Test
      working-directory: ${{ env.PROJECT_NAME }}
      env:
        APP_NAME: ${{ env.PROJECT_NAME }}_App
      run: |
        xcodebuild clean build test -scheme $APP_NAME -workspace $PROJECT_NAME.xcworkspace -destination 'name=iPhone 13' | xcpretty --utf --color
